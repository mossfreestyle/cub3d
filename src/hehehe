# TODO Cub3D - Suivi de la progression détaillé

---

## 🟢 PARSING

### ✅ Déjà fait
- Lecture du fichier map avec GNL
- Parsing des textures et couleurs (NO, SO, WE, EA, F, C)
- Vérification de l’unicité des textures et couleurs
- Vérification de l’extension `.xpm` pour les textures
- Vérification que la map est le dernier élément du fichier
- Gestion des lignes vides dans la map
- Extraction du bloc de map contenant le joueur (`add_tmp`)
- Vérification du nombre de joueurs (exactement 1)
- Récupération de la position et de la direction du joueur
- Vérification des caractères valides dans la map
- Remplissage des espaces vides par un caractère spécifique (`X`)
- Vérification que la map est bien fermée par des murs (`check_is_closed`)
- Gestion des erreurs et libération mémoire

### 🟡 À faire / À améliorer

#### 🔸 Robustesse parsing
- [ ] **Vérifier que le joueur n’est pas sur un bord de la map**  
  → Le joueur ne doit jamais être placé sur la première/dernière ligne ou colonne.
- [ ] **Vérifier que le joueur ne touche pas un espace ou un bord**  
  → Les cases autour du joueur doivent être des murs ou des cases valides.
- [ ] **Vérifier l’existence réelle des fichiers de textures**  
  → Ouvrir chaque chemin, vérifier l’accessibilité, et que le fichier est bien un `.xpm`.
- [ ] **Gérer les erreurs de format RGB**  
  → Vérifier qu’il y a bien 3 valeurs, séparées par des virgules, toutes entre 0 et 255, pas de doubles virgules, pas de caractères non numériques.
- [ ] **Gérer les doublons de textures/couleurs**  
  → Chaque identifiant (NO, SO, WE, EA, F, C) doit apparaître une seule fois.
- [ ] **Gérer les cas limites**  
  → Map non rectangulaire, lignes très longues, caractères inattendus, plusieurs blocs de map, etc.
- [ ] **Ajouter des messages d’erreur plus précis**  
  → Indiquer la ligne et la nature exacte de l’erreur.
- [ ] **Nettoyer et commenter le code pour la relecture finale**

#### 🔸 Bonus parsing (optionnel)
- [ ] **Supporter les maps avec plusieurs blocs séparés par des lignes vides**  
  → S’assurer que seul le bloc contenant le joueur est gardé.
- [ ] **Vérifier que la map ne contient pas de caractères interdits même dans les lignes vides**

---

## 🟦 EXECUTION / RAYCASTING

### ✅ Déjà fait
- Initialisation de la fenêtre et de la structure MLX
- Initialisation des structures player, map, assets, key, ray
- Hook clavier pour les déplacements de base (WASD, ESC)
- Déplacement du joueur dans la map (move)
- Début du raycasting (fonction DDA présente)

### 🟡 À faire / À améliorer

#### 🔸 Affichage et moteur
- [ ] **Affichage des murs avec textures**  
  → Charger les fichiers `.xpm`, appliquer la texture sur les murs selon la direction du rayon.
- [ ] **Affichage du sol et du plafond**  
  → Colorier les pixels du sol et du plafond selon la couleur définie dans la map.
- [ ] **Gestion correcte des collisions avec les murs et les espaces vides**  
  → Empêcher le joueur de traverser les murs ou les cases remplies (`X`).
- [ ] **Gestion de la rotation du joueur (gauche/droite)**  
  → Modifier l’angle de vue avec les touches ou la souris.
- [ ] **Gestion des angles et du FOV**  
  → S’assurer que le rendu respecte bien le champ de vision.
- [ ] **Optimisation du raycasting**  
  → Correction du fish-eye, gestion des distances, optimisation des calculs.
- [ ] **Gestion de la fermeture propre de la fenêtre (croix, ESC)**
- [ ] **Gestion des erreurs lors du chargement des textures**

#### 🔸 Bonus exécution (optionnel)
- [ ] **Effets visuels (shading, animation, etc.)**
- [ ] **Affichage d’un HUD minimal**

---

## ⭐️ BONUS

### 🟡 À faire

#### 🔸 Mini-map
- [ ] **Affichage d’une mini-map à l’écran**  
  → Vue du dessus, position du joueur, murs, direction du regard.

#### 🔸 Collisions avancées
- [ ] **Collision précise avec les murs**  
  → Empêcher le joueur de traverser les murs même en diagonale ou en glissant sur les bords.

#### 🔸 Mouvement de la souris
- [ ] **Gestion du mouvement de la souris pour tourner la vue**  
  → Capter les mouvements horizontaux de la souris pour faire tourner la caméra.

#### 🔸 (Optionnel)
- [ ] **Portes, objets interactifs, HUD avancé, sons, etc.**

---

## 📝 Récapitulatif progression

- **Parsing** : 75%  
  (reste surtout la robustesse, les checks de bord, et la gestion des erreurs fines)
- **Raycasting/exécution** : 40%  
  (base posée, reste l’affichage textures, collisions, et la gestion fine du moteur)
- **Bonus** : 0%  
  (à commencer après le core)

---

**Prochaines étapes recommandées** :
1. Finaliser la robustesse du parsing (tous les checks du sujet, gestion des erreurs)
2. Terminer l’affichage raycasting avec textures et collisions
3. Ajouter la mini-map et la gestion souris pour le bonus

---